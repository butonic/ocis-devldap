// Code generated by fileb0x at "2019-12-09 11:09:44.293079 +0100 CET m=+0.003195657" from config file "embed.yml" DO NOT EDIT.
// modification hash(06e3207ebc16ed90afc3851007402435.8058aec596c5fb73022d09bb97af796e)

package assets

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileDataJSON is "data.json"
var FileDataJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x97\x4b\x6f\xe3\x36\x14\x85\xd7\xd6\xaf\x10\xb4\x36\x67\xf4\xa0\x24\x2a\x80\x81\x0e\x8a\xb6\xab\xa2\x83\x6e\x8b\x59\x50\x7c\xd8\x2c\x24\xd1\xa3\x47\x1a\x23\xc8\x7f\x2f\xa8\x87\x63\x5a\xd7\x89\xe4\x06\xd3\xdd\x0c\x75\x3f\x1e\x26\xe7\x1e\xf2\xe6\xd9\xd9\x78\x9c\xed\xc4\x13\x2d\x8f\x85\xd8\x72\xb6\xd3\xf5\xde\x7b\x70\x9f\x5f\xb6\xce\xc6\x63\xd5\x8e\xf2\x52\x55\x5b\xb0\xc4\xd9\x6c\xbc\xae\x11\xf5\x91\x36\xcd\x3f\xba\xe6\xde\x83\xeb\xf5\xe5\x9e\xb3\x79\xd9\x3a\xce\xc6\xd3\xdd\xce\x14\x34\x30\x7f\x96\x28\x72\x51\xb7\xdb\xb7\x8b\x8d\x98\xce\xff\x16\xac\x65\x05\x6d\x1a\xef\xc1\xfd\xcb\x53\x95\x68\xff\xa8\xf7\x5f\x45\xdd\xe8\xca\xdb\xba\xde\xf1\xf5\x5f\xba\x51\x4f\x5f\x18\xd3\x5d\xd5\x7a\xdf\xb6\xfd\x51\xd5\x70\xc2\x5e\xcd\xdb\x42\xa7\xaf\x45\x41\x5b\xf5\xa8\xda\xd3\xf0\xbd\xa4\xaa\x30\xeb\x42\x55\x4d\x2b\x54\xf5\xd3\x78\xae\x4f\xe6\x50\xe7\x0a\xca\xb9\x6a\x95\xae\x68\xd1\x9f\x6a\x10\xb0\x4b\x5d\x8f\x0a\x6b\x65\x38\x12\xab\xae\x4f\xd4\xf4\x2b\xbf\x8c\x7a\xc3\xda\x5e\x3d\x8a\xaa\xa2\xa5\x30\x9f\xbe\x5c\x14\x73\xd5\x1c\x0b\x7a\x9a\x3e\x7d\xad\xb5\xfc\xe4\x0e\x05\xae\xbd\x45\x37\xfe\xf0\xcf\x07\xf1\xf4\x22\x52\xc6\x22\x16\x0a\x9c\x91\x1c\x87\x19\xcf\xe3\x20\x8b\x04\x8d\x22\x9f\x4a\x96\x04\x7c\x40\x44\xd5\xd6\xa7\x89\x9b\x10\x64\x18\x64\x20\x64\x28\x34\xc7\x06\x8f\xf6\xeb\xf5\x58\xd7\xb4\xba\xbc\xd2\xf3\x26\xe7\xaa\xae\xcc\x45\xed\x3d\xb8\x81\xef\xfb\xc1\xf8\x6b\x79\x5d\x0d\xcf\xab\xe6\x97\x31\xee\x71\xdb\x34\x61\x30\x2d\x8d\x5d\xce\xa6\xf7\x61\xd7\x50\x55\xa8\x6a\x8f\x0a\xfd\x68\x7a\x50\x77\xbb\x7d\xad\xbb\x23\xd4\x8d\xdb\x89\x79\x54\xba\x50\x15\x3a\xd0\x76\x31\x72\x3c\x9c\x1a\xc5\x9a\x25\x32\xce\x66\x33\x74\xc9\x41\x97\x82\xab\x5a\xb0\x56\xd7\x27\xf3\x93\x7d\x36\x2b\x9f\xc7\xb6\xe9\xb3\xd6\xef\x5d\xd2\x5a\x89\x1f\x15\xa3\x5e\x6c\x5d\x8a\x58\x57\x2b\x31\x77\x63\x08\xc1\xc5\x7e\x43\x06\x7e\xee\xce\x0b\x56\x00\x7e\x7f\x2d\x04\xfb\xbf\xff\xee\x5e\xd0\x40\x44\x7b\xb1\xeb\x84\x96\x0c\x48\xa8\x15\x1c\x96\xfa\x44\x26\x5c\xc6\x3c\xc2\x38\xa7\x38\x8b\xa2\x88\xc6\xa9\xc0\x58\x08\xc9\x42\x28\x38\x13\x82\x0c\x83\x0c\x84\x0c\x85\xe6\x18\x10\x9c\x65\x7a\x56\x70\x26\x04\x0e\x4e\xb8\x28\x38\x37\x7c\x82\x52\x53\x53\xae\xba\x72\x55\x68\x8e\xba\xd0\xd5\x6a\xe8\xe3\x62\x33\x34\xda\x6b\x6a\x6a\xc5\x0e\xb4\xe6\x3f\x2a\x37\xa3\xdc\xba\xe4\x48\x71\xaa\x4a\x0a\xdc\x64\x43\x76\xac\x3d\x87\xf4\xfc\x3a\x10\x40\x7e\xfe\xbc\x2c\x06\x13\x34\x56\xb8\xd6\x1e\x40\x8a\x46\xd9\xeb\x1c\xd5\xf2\xbd\x1c\xc9\xf5\x39\x92\xff\x25\x47\xcb\xf4\xac\x1c\xc9\x37\x73\x14\x2d\xca\xd1\x4d\xd7\xa0\x24\x7d\xef\x68\xd5\xae\x4e\x85\x2a\x74\xa3\x8f\x87\xd3\xff\xf5\x06\x4d\x9d\x77\x31\xf0\xdd\xdc\xeb\x62\xe2\x5b\x71\x82\x1b\xd9\xeb\xeb\xcf\x49\xfb\xad\xff\xdf\xe5\x4c\x65\x2b\x00\x0d\xc5\x7d\x1e\xa7\x89\xc8\x91\x4c\x29\x43\x38\x16\x21\x22\x22\xc9\x10\x0d\x69\x20\xfc\x34\x8b\xe3\x24\x07\x66\xa7\x09\x33\x94\x81\x0c\x33\x47\x80\x1e\x5c\x06\x5a\x3d\x38\x21\xde\x1b\xdd\xd6\x55\xea\x7b\x27\x86\x86\xba\x6c\xa7\xf7\x67\xea\x73\x3b\xbc\x3b\x36\x9c\x2b\x17\x5c\x95\xa6\x61\x5e\xef\xd6\x15\x43\xd5\x9d\x3e\xdb\x0a\x80\xcf\x71\xe0\x67\x59\x4c\x52\xe4\xf3\x14\x23\x1c\x27\x04\x91\x30\x21\x88\xa5\x39\x4d\xfd\x28\xce\xa4\x0c\x01\x9f\x27\xcc\x50\x06\x32\xcc\x1c\x01\x7c\x5e\x06\x5a\x3e\x4f\x08\xec\x73\x08\xfa\xbc\xcc\xe3\x0b\x2b\x96\xcf\xaa\x77\x3a\x61\x09\x00\x46\xa4\x3e\x8e\x59\x40\x72\xe4\xcb\x84\x20\x8c\x89\x44\x79\x1e\xc4\xe6\x2f\x0a\x16\x64\x52\xd2\x3c\xa3\x80\x11\x13\x66\x28\x03\x19\x66\x8e\x00\x46\x2c\x03\x2d\x23\x26\x04\x36\x22\xfa\x18\x23\x96\x8f\x4c\x77\x1a\x61\x09\x40\x4f\x29\x61\x59\x14\x4b\x8e\x48\x16\xe4\x08\xe7\x32\x44\x94\x06\x19\x92\x8c\xc6\x84\x91\x98\x70\x1f\xba\xf9\x26\xcc\x50\x06\x32\xcc\x1c\x81\x5e\xdf\x45\xa0\xfd\xfa\x8e\x08\x6c\x04\xbe\x69\xc4\xbb\x57\xd9\x37\xc7\x75\x5d\xf7\xfc\x0c\xad\x18\x45\xef\x7d\x87\x6c\x09\xc0\x8e\xc0\xf7\xe3\x28\x25\x21\xa2\x04\x07\x08\x13\x1a\x21\x42\xb2\x14\x51\x46\xf3\x2c\x8b\x38\xcd\x39\x07\xec\x98\x30\x43\x19\xc8\x30\x73\x04\xb0\x63\x19\x68\xd9\x31\x21\xb0\x1d\xf1\x47\xd9\xb1\x62\x04\xba\xd3\x0d\x5b\x01\xba\xa4\x30\xa1\x3e\xa5\x01\x8a\x29\x4b\x11\x8e\xa2\x04\x11\x99\x4a\x44\x45\x12\x04\x3c\x4c\x39\x0e\x24\x74\x49\x8d\x98\xa1\x0c\x64\x98\x39\x02\x5d\x52\x8b\x40\xfb\x92\x1a\x11\xd8\x8c\xe4\xa6\x19\x0b\x1e\xef\xab\x74\xac\x9a\x2e\xef\x9e\xd3\xae\x44\xc0\x51\x2d\x16\x44\xf2\x1c\x45\x22\x94\x08\x4b\x12\x98\x97\x43\xa0\x40\x88\x24\xc4\xbe\x24\x3c\x22\xe0\xa8\x36\x60\x86\x32\x90\x61\xe6\x08\x38\xaa\x2d\x01\xaf\x46\xb5\x01\x81\x4d\x49\x3f\xc0\x14\xe7\xc5\xf9\x37\x00\x00\xff\xff\x02\xf7\x58\x40\xac\x15\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileDataJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "data.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
